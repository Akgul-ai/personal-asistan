package com.yourcompany.assistant.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
// JWT kullanılıyorsa ilgili filtreleri ve UserDetailsService'i eklemeniz gerekir.

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // API için genellikle devre dışı bırakılır
            .authorizeHttpRequests(authz -> authz
                .requestMatchers("/auth/**").permitAll() // Login/Register herkese açık
                .requestMatchers("/api/assistant/**").authenticated() // Asistan endpoint'leri kimlik doğrulaması gerektirir
                .anyRequest().permitAll() // Diğer her şey (varsa) herkese açık (veya kısıtlayın)
            )
            // JWT kullanıyorsanız:
            // .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            // .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class) // JWT filtrenizi ekleyin
            .httpBasic(withDefaults -> {}); // Veya formLogin() veya JWT için kendi ayarlarınız

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // TODO: UserDetailsService bean'ini implemente edin (UserDetailsServiceImpl)
    // TODO: AuthenticationManager bean'ini expose edin (gerekirse)
    // TODO: JWT filtresi bean'ini implemente edin (gerekirse)
}
